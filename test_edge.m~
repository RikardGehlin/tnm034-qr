function edges = test_edge(theArray, origin, offset_direction)

theArray =      [   1 0 0 0 1 0 0 0 0;
                    1 1 0 0 0 0 1 1 1;
                    1 1 1 0 1 0 1 0 1;
                    0 0 0 1 0 1 1 1 1;
                    1 1 0 1 1 0 0 1 0;
                    0 1 0 1 0 1 1 0 0
                ];
array_size = size(theArray);


edges = [];

flipX = false;
flipY = false;

if(offset_direction(1) < 0)
    theArray = flipdim(theArray, 1);
    origin(1) = array_size(1) - origin(1) + 1;
    flipY = true;
end 

if(offset_direction(2) < 0)
    theArray = flipdim(theArray, 2);
    origin(2) = array_size(2) - origin(2) + 1;
    flipX = true;
end

position_offset = origin;
offset_direction = abs(offset_direction);

for i = 1 : 3
    % om x är mindre än max
    if(position_offset < array_size)
        'internal'
        if(i > 1)
            while(theArray(position_offset(1)-offset_direction(1), position_offset(2)-offset_direction(2)) == 1 || theArray(position_offset(1), position_offset(2)) ~= 1) 
                position_offset = position_offset + offset_direction;
                if(position_offset(1) >= array_size(1) || position_offset(2) >= array_size(2))
                    'break'
                    break
                end
            end
        else
            while(theArray(position_offset(1), position_offset(2)) ~= 1)
                position_offset = position_offset + offset_direction;
                if(position_offset(1) >= array_size(1) || position_offset(2) >= array_size(2))
                    'break'
                    break
                end
            end
        end
        
        edges = [edges; position_offset];
        position_offset = position_offset + offset_direction;
    % om vi befinner oss på randen sätt randpositionen som punkt
    % FUNKAR INTE I 2D
    elseif(position_offset(1) == array_size(1) | position_offset(2) == array_size(2))
        'edge'
        edges = [edges; position_offset];
    % i alla andra fall bryt
    else
        'other'
    end
end

num_of_edges = size(edges);

for i = 1 : num_of_edges(1)
    if(flipY)
         edges(i,1) = array_size(1) - edges(i,1) + 1;
    end

    if(flipX)
        edges(i,2) = array_size(2) - edges(i,2) + 1;
    end
end